from django.db import models
from zipfile import ZipFile
from xml.dom import minidom
from axmlparser import axmlprinter
from os.path import splitext
import qrcode
from io import StringIO
from django.core.files.uploadedfile import SimpleUploadedFile


# pylint: disable-msg=W0613
def apkfilename(instance, filename):
    return "%s.apk" % instance.title


def iconfilename(instance, filename):
    return "%s-icon%s" % (instance.title, splitext(filename)[1])


def qrcodefilename(instance, filename):
    return "%s-qrcode.png" % instance.title


# pylint: enable-msg=W0613

# Create your models here.
class Product(models.Model):
    title = models.CharField(max_length=30, unique=True)
    apkfile = models.FileField(upload_to=apkfilename, verbose_name="APK File")
    iconfile = models.ImageField(upload_to=iconfilename, verbose_name="Icon File")
    description = models.TextField(max_length=4000, verbose_name="Description")
    recent = models.TextField(max_length=500, verbose_name="Recent Changes", blank=True)
    # the following fields are generated by the save() method
    package = models.CharField(max_length=40, blank=True, editable=False)
    version = models.CharField(max_length=40, blank=True, editable=False)
    qrcodefile = models.ImageField(upload_to=qrcodefilename, editable=False)

    def __unicode__(self):
        return self.title

    # http://stackoverflow.com/questions/6380952/django-admin-post-processing-of-uploaded-file
    def save(self, *args, **kwargs):
        with ZipFile(self.apkfile, "r") as myzip:
            am = myzip.read("AndroidManifest.xml")
            ap = axmlprinter.AXMLPrinter(am)
            ax = minidom.parseString(ap.getBuff())
            manifest = ax.getElementsByTagName("manifest")[0]
            for (name, value) in list(manifest.attributes.items()):
                if name == "android:versionName":
                    self.version = value
                elif name == "package":
                    self.package = value
            # http://stackoverflow.com/questions/7894897/django-saving-an-image-manually-to-an-imagefield-field
            qrimage = qrcode.make("market://search?q=pname:%s" % self.package)
            temp_handle = StringIO()
            qrimage.save(temp_handle, "png")
            temp_handle.seek(0)
            suf = SimpleUploadedFile("suf", temp_handle.read(), content_type="image/png")
            # pylint: disable-msg=E1101
            self.qrcodefile.save("save", suf, save=False)
            # pylint: enable-msg=E1101
        super(Product, self).save(*args, **kwargs)
